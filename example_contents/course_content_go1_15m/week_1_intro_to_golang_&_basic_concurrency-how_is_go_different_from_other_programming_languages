Unit_name: Week 1: Intro to Golang & Basic Concurrency
Page_name: How is Go different from other programming languages?

1. With regard to Go modules, what is the primary role of the `go.mod` file?

    A) It contains the compiled binary code.
    
    - Incorrect. The `go.mod` file is a text file, not a binary file. It has another major role in the context of Go modules.

    B) It declares the root of the module and defines its dependencies.
    
    - Correct. The `go.mod` file is fundamental as it declares the root of the module and lists its dependencies.

    C) It stores the main function of your Go program.
    
    - Incorrect. The `go.mod` file is not meant to store any function. Its role is related to module and dependency management.

2. Consider the following environment variables: `GOPATH`, `GOROOT`, and `GOHOME`. Which one is used to indicate the workspace location in Go?

    A) GOPATH 

    - Correct. The `GOPATH` environment variable is set to the path of your workspace.

    B) GOROOT 

    - Incorrect. While `GOROOT` is an important environment variable, it points to the Go installation directory, not the workspace.

    C) GOHOME 

    - Incorrect. `GOHOME` is not a standard Go environment variable. Go only recognizes `GOPATH` and `GOROOT`.

3. When using the `go mod init <module>` command, what is its primary function?

    A) It creates a new Go module and generates a 'main.go' file.

    - Incorrect. While the `go mod init` command does initialize a new module, it doesn't automatically create a 'main.go' file.

    B) It compiles all the Go files in the current module.

    - Incorrect. This command doesn't compile Go files. It plays a role in initializing a module.

    C) It initializes a new Go module and creates a 'go.mod' file.

    - Correct. The command `go mod init <module>` initializes a new module and creates a `go.mod` file.

4. Suppose you have a `main.go` file and you want to compile and execute it in one operation. What is the correct command to use?

    A) go build

    - Incorrect. Though `go build` compiles the program, it doesn't execute it.

    B) go run

    - Correct. The `go run` command is used to compile and execute a Go file.

    C) go compile

    - Incorrect. `go compile` is not a valid Go command.

5. If you want to retrieve and install a remote package in your Go project, which command should you use?

    A) Use go get <package URL>

    - Correct. The `go get <package URL>` command retrieves and installs the remote package in your project.

    B) Use go download <package URL>

    - Incorrect. There's no such `go download` command in Go. 

    C) Use go import <package URL>

    - Incorrect. You might use 'import' in your code to use a package, but it's `go get` that fetches and installs remote packages.